#!/bin/bash
#
# A kubectl plugin which starts a capture for a duration and uploads to a S3
# bucket when is finished to troubleshoot it later with Sysdig Inspect


pod=""
namespace="default"
duration="120"
now=$(date +%s)
capture_pod=""
sysdig_params=""

function main() {
  parse_arguments "$@"
  start_capture
}

function parse_arguments() {
  pod="$1"
  shift

  while [ $# -gt 0 ]
  do
    case $1 in
      -ns|--namespace)
        namespace=$2
        shift
        ;;
      -M)
        duration=$2
        shift
        ;;
      -w|--write=*|-z|--compress|-pc|-pk|-pm|-print=*|-S|--summary)
        # Do not allow changes on these parameters
        echo $0: $1: skipping parameter for Sysdig>&2
        ;;
      --)
        shift
        break
        ;;
      *)
        sysdig_params="${sysdig_params} $1"
        ;;
    esac
    shift
  done

  if [[ -z "${pod}" ]]; then
    usage_and_die 1
  fi

  capture_pod="capture-${pod}-${now}"
  sysdig_params="-S -M ${duration} -pk -z -w /${capture_pod}.scap.gz ${sysdig_params}"
}

function usage_and_die() {
  cat << 'EOF'
Usage: kubectl capture POD [-ns NAMESPACE] [sysdig options]
Options:
  -ns | --namespace   The namespace where the target pod lives (default: default)
EOF
  exit $1
}

function start_capture() {
  node=$(kubectl -n ${namespace} get pod ${pod} -o jsonpath='{.spec.nodeName}' 2>/dev/null)
  if [[ $? -ne 0 ]];then
    echo "error: Unable to trigger a capture on pod ${pod}"
    exit 1
  fi

  cat << EOF > capture-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "${capture_pod}"
spec:
  containers:
  - name: capturer
    image: sysdig/sysdig
    args:
      - /bin/bash
      - "-c"
      - "echo '* Capturing system calls'; sysdig ${sysdig_params}; touch /.finished; trap 'exit 0' TERM; sleep infinity & wait $!"
    imagePullPolicy: IfNotPresent
    securityContext:
      privileged: true
    resources:
      requests:
        cpu: 100m
        memory: 64Mi
      limits:
        cpu: 100m
        memory: 128Mi
    volumeMounts:
    - mountPath: /host/var/run/docker.sock
      name: docker-socket
    - mountPath: /host/dev
      name: dev-fs
    - mountPath: /host/proc
      name: proc-fs
      readOnly: true
    - mountPath: /host/boot
      name: boot-fs
      readOnly: true
    - mountPath: /host/lib/modules
      name: lib-modules
      readOnly: true
    - mountPath: /host/usr
      name: usr-fs
      readOnly: true
    - mountPath: /dev/shm
      name: dshm
  volumes:
  - name: dshm
    emptyDir:
      medium: Memory
  - name: docker-socket
    hostPath:
      path: /var/run/docker.sock
  - name: dev-fs
    hostPath:
      path: /dev
  - name: proc-fs
    hostPath:
      path: /proc
  - name: boot-fs
    hostPath:
      path: /boot
  - name: lib-modules
    hostPath:
      path: /lib/modules
  - name: usr-fs
    hostPath:
      path: /usr
  nodeName: ${node}
EOF

  kubectl apply -f capture-pod.yaml > /dev/null 2>&1
  rm capture-pod.yaml

  echo "Sysdig is starting to capture system calls:"
  echo ""
  echo "Node: ${node}"
  echo "Pod: ${pod}"
  echo "Duration: ${duration} seconds"
  echo "Parameters for Sysdig: ${sysdig_params}"
  echo ""

  wait_until_finished

  kubectl cp ${capture_pod}:/${capture_pod}.scap.gz ${capture_pod}.scap.gz > /dev/null 2>&1
  kubectl delete pod ${capture_pod} > /dev/null 2>&1
  echo "The capture has been downloaded to your hard disk at:"
  echo "${PWD}/${capture_pod}.scap.gz"
}

function wait_until_finished() {
  sleep ${duration}
  while [[ ! -e .finished ]]; do
    kubectl cp ${capture_pod}:/.finished .finished > /dev/null 2>&1
    sleep 15
  done
  rm .finished
}

main "$@"
