#!/bin/bash
#
# A kubectl plugin which starts a capture for a duration and uploads to a S3
# bucket when is finished to troubleshoot it later with Sysdig Inspect


pod=""
namespace="default"
duration="120"

function main() {
  parse_arguments "$@"
  create_job_for_sysdig_capture
}

function parse_arguments() {
  local params=""
  while [ $# -gt 0 ]
  do
    case $1 in
      -d|--duration)
        duration=$2
        shift
        ;;
      -n|--namespace)
        namespace=$2
        shift
        ;;
      --)
        shift
        break
        ;;
      -*)
        echo $0: $1: unrecognized option >&2
        ;;
      *)
        params="$params $1"
        ;;
    esac
    shift
  done

  eval set -- "$params"
  pod="${1}"

  if [[ -z "${pod}" ]]; then
    usage_and_die 1
  fi
}

function usage_and_die() {
  cat << 'EOF'
Usage: kubectl sysdig-capture pod_name
Options:
  -d | --duration     Capture system calls for this duration (default: 120 seconds)
  -n | --namespace    The namespace where the target pod lives (default: default)
EOF
  exit $1
}

function create_job_for_sysdig_capture() {
  local now=$(date +%s)
  local capture_pod="sysdig-capture-${now}-${pod}"

  node=$(kubectl -n ${namespace} get pod ${pod} -o jsonpath='{.spec.nodeName}' 2>/dev/null)
  if [[ $? -ne 0 ]];then
    exit 1
  fi

  cat << EOF > sysdig-capture-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "${capture_pod}"
spec:
  containers:
  - name: capturer
    image: sysdig/capture-and-sleep
    imagePullPolicy: IfNotPresent
    securityContext:
      privileged: true
    resources:
      requests:
        cpu: 100m
        memory: 64Mi
      limits:
        cpu: 100m
        memory: 128Mi
    env:
    - name: CAPTURE_DURATION
      value: "${duration}"
    - name: CAPTURE_FILE_NAME
      value: ${capture_pod}
    volumeMounts:
    - mountPath: /host/var/run/docker.sock
      name: docker-socket
    - mountPath: /host/dev
      name: dev-fs
    - mountPath: /host/proc
      name: proc-fs
      readOnly: true
    - mountPath: /host/boot
      name: boot-fs
      readOnly: true
    - mountPath: /host/lib/modules
      name: lib-modules
      readOnly: true
    - mountPath: /host/usr
      name: usr-fs
      readOnly: true
    - mountPath: /dev/shm
      name: dshm
  volumes:
  - name: dshm
    emptyDir:
      medium: Memory
  - name: docker-socket
    hostPath:
      path: /var/run/docker.sock
  - name: dev-fs
    hostPath:
      path: /dev
  - name: proc-fs
    hostPath:
      path: /proc
  - name: boot-fs
    hostPath:
      path: /boot
  - name: lib-modules
    hostPath:
      path: /lib/modules
  - name: usr-fs
    hostPath:
      path: /usr
  nodeName: ${node}
EOF

  kubectl apply -f sysdig-capture-pod.yaml > /dev/null 2>&1
  rm sysdig-capture-pod.yaml

  echo "Sysdig is starting to capture system calls. See details below:"
  echo ""
  echo "Node: ${node}"
  echo "Pod: ${pod}"
  echo "Duration: ${duration} seconds"
  echo ""

  sleep ${duration}
  while [[ ! -e .finished ]]; do
    kubectl cp ${capture_pod}:/captures/.finished .finished > /dev/null 2>&1
    sleep 20
  done
  rm .finished

  kubectl cp ${capture_pod}:/captures/${capture_pod}.scap.gz ${capture_pod}.scap.gz > /dev/null 2>&1
  kubectl delete pod ${capture_pod} > /dev/null 2>&1
  echo "Your capture is now available at ${capture_pod}.scap.gz"
}

main "$@"
